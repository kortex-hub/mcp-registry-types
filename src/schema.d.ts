/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/v0/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List MCP servers
         * @description Returns a list of all registered MCP servers
         */
        get: {
            parameters: {
                query?: {
                    /** @description Pagination cursor for retrieving next set of results */
                    cursor?: string;
                    /** @description Maximum number of items to return */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of MCP servers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerList"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/servers/{server_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get MCP server details
         * @description Returns detailed information about a specific MCP server. Returns latest version by default, or specific version if version query parameter is provided.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Specific version to retrieve (e.g., "1.0.0"). If not provided, returns latest version. */
                    version?: string;
                };
                header?: never;
                path: {
                    /** @description Unique server ID (consistent across all versions) */
                    server_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Detailed server information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerDetail"];
                    };
                };
                /** @description Server not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Server not found */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/servers/{server_id}/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all versions of an MCP server
         * @description Returns all available versions for a specific MCP server, ordered by publication date (newest first)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique server ID (consistent across all versions) */
                    server_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of all versions for the server */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerList"];
                    };
                };
                /** @description Server not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Server not found */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Publish MCP server (Optional)
         * @description Publish a new MCP server to the registry or update an existing one.
         *
         *     **Note**: This endpoint is optional for registry implementations. Read-only registries may not provide this functionality.
         *
         *     Authentication mechanism is registry-specific and may vary between implementations.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ServerDetail"];
                };
            };
            responses: {
                /** @description Successfully published server */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServerDetail"];
                    };
                };
                /** @description Unauthorized - Invalid or missing authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid or expired Registry JWT token */
                            error?: string;
                        };
                    };
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example You do not have permission to publish this server */
                            error?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Failed to publish server */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        Repository: {
            /**
             * Format: uri
             * @example https://github.com/modelcontextprotocol/servers
             */
            url: string;
            /** @example github */
            source: string;
            /** @example b94b5f7e-c7c6-d760-2c78-a5e9b8a5b8c9 */
            id: string;
            /**
             * @description Optional relative path from repository root to the server location within a monorepo structure
             * @example src/everything
             */
            subfolder?: string;
        };
        Server: {
            /**
             * @description Reverse DNS name of the MCP server
             * @example io.github.modelcontextprotocol/filesystem
             */
            name: string;
            /**
             * @description Human-readable description of the server's functionality
             * @example Node.js server implementing Model Context Protocol (MCP) for filesystem operations.
             */
            description: string;
            /**
             * @description Server lifecycle status. 'deprecated' indicates the server is no longer recommended for new usage.
             * @default active
             * @example active
             * @enum {string}
             */
            status: "active" | "deprecated";
            repository?: components["schemas"]["Repository"];
            /**
             * @description Version string for this server. SHOULD follow semantic versioning (e.g., '1.0.2', '2.1.0-alpha'). Equivalent of Implementation.version in MCP specification.
             * @example 1.0.2
             */
            version: string;
            /**
             * Format: uri
             * @description Optional URL to the server's homepage, documentation, or project website. This provides a central link for users to learn more about the server. Particularly useful when the server has custom installation instructions or setup requirements.
             * @example https://modelcontextprotocol.io/examples
             */
            websiteUrl?: string;
        };
        ServerList: {
            servers: components["schemas"]["ServerDetail"][];
            metadata?: {
                /** @description Cursor for next page of results */
                next_cursor?: string;
                /**
                 * @description Number of items in current page
                 * @example 30
                 */
                count?: number;
            };
        };
        Package: {
            /**
             * @description Registry type indicating how to download packages (e.g., 'npm', 'pypi', 'oci', 'nuget', 'mcpb')
             * @example npm
             * @example pypi
             * @example oci
             * @example nuget
             * @example mcpb
             */
            registryType?: string;
            /**
             * Format: uri
             * @description Base URL of the package registry
             * @example https://registry.npmjs.org
             * @example https://pypi.org
             * @example https://docker.io
             * @example https://api.nuget.org
             * @example https://github.com
             * @example https://gitlab.com
             */
            registryBaseUrl?: string;
            /**
             * @description Package identifier - either a package name (for registries) or URL (for direct downloads)
             * @example @modelcontextprotocol/server-brave-search
             * @example https://github.com/example/releases/download/v1.0.0/package.mcpb
             */
            identifier?: string;
            /**
             * @description Package version
             * @example 1.0.2
             */
            version?: string;
            /**
             * @description SHA-256 hash of the package file for integrity verification.
             * @example fe333e598595000ae021bd27117db32ec69af6987f507ba7a63c90638ff633ce
             */
            fileSha256?: string;
            /**
             * @description A hint to help clients determine the appropriate runtime for the package. This field should be provided when `runtimeArguments` are present.
             * @example npx
             * @example uvx
             * @example dnx
             */
            runtimeHint?: string;
            /** @description A list of arguments to be passed to the package's runtime command (such as docker or npx). The `runtimeHint` field should be provided when `runtimeArguments` are present. */
            runtimeArguments?: components["schemas"]["Argument"][];
            /** @description A list of arguments to be passed to the package's binary. */
            packageArguments?: components["schemas"]["Argument"][];
            /** @description A mapping of environment variables to be set when running the package. */
            environmentVariables?: components["schemas"]["KeyValueInput"][];
        };
        Input: {
            /** @description A description of the input, which clients can use to provide context to the user. */
            description?: string;
            /** @default false */
            isRequired: boolean;
            /**
             * @description Specifies the input format. Supported values include `filepath`, which should be interpreted as a file on the user's filesystem.
             *
             *     When the input is converted to a string, booleans should be represented by the strings "true" and "false", and numbers should be represented as decimal values.
             *
             * @default string
             * @enum {string}
             */
            format: "string" | "number" | "boolean" | "filepath";
            /** @description The default value for the input. If this is not set, the user may be prompted to provide a value. If a value is set, it should not be configurable by end users.
             *
             *     Identifiers wrapped in `{curly_braces}` will be replaced with the corresponding properties from the input `variables` map. If an identifier in braces is not found in `variables`, or if `variables` is not provided, the `{curly_braces}` substring should remain unchanged.
             *      */
            value?: string;
            /**
             * @description Indicates whether the input is a secret value (e.g., password, token). If true, clients should handle the value securely.
             * @default false
             */
            isSecret: boolean;
            /** @description The default value for the input. */
            default?: string;
            /**
             * @description A list of possible values for the input. If provided, the user must select one of these values.
             * @example []
             */
            choices?: string[];
        };
        InputWithVariables: components["schemas"]["Input"] & {
            /** @description A map of variable names to their values. Keys in the input `value` that are wrapped in `{curly_braces}` will be replaced with the corresponding variable values. */
            variables?: {
                [key: string]: components["schemas"]["Input"];
            };
        };
        /** @description A positional input is a value inserted verbatim into the command line. */
        PositionalArgument: components["schemas"]["InputWithVariables"] & ({
            /**
             * @example positional
             * @enum {string}
             */
            type: "positional";
            /**
             * @description An identifier-like hint for the value. This is not part of the command line, but can be used by client configuration and to provide hints to users.
             * @example file_path
             */
            valueHint?: string;
            /**
             * @description Whether the argument can be repeated multiple times in the command line.
             * @default false
             */
            isRepeated: boolean;
        } | unknown | unknown);
        /** @description A command-line `--flag={value}`. */
        NamedArgument: components["schemas"]["InputWithVariables"] & {
            /**
             * @example named
             * @enum {string}
             */
            type: "named";
            /**
             * @description The flag name, including any leading dashes.
             * @example --port
             */
            name: string;
            /**
             * @description Whether the argument can be repeated multiple times.
             * @default false
             */
            isRepeated: boolean;
        };
        KeyValueInput: components["schemas"]["InputWithVariables"] & {
            /**
             * @description Name of the header or environment variable.
             * @example SOME_VARIABLE
             */
            name: string;
        };
        Argument: components["schemas"]["PositionalArgument"] | components["schemas"]["NamedArgument"];
        Remote: {
            /**
             * @description Transport protocol type
             * @example sse
             * @enum {string}
             */
            type: "streamable-http" | "sse";
            /**
             * Format: uri
             * @description Remote server URL
             * @example https://mcp-fs.example.com/sse
             */
            url: string;
            /** @description HTTP headers to include */
            headers?: components["schemas"]["KeyValueInput"][];
        };
        /** @description Schema for a static representation of an MCP server. Used in various contexts related to discovery, installation, and configuration. */
        ServerDetail: components["schemas"]["Server"] & {
            /**
             * Format: uri
             * @description JSON Schema URI for this server.json format
             * @example https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json
             */
            $schema?: string;
            packages?: components["schemas"]["Package"][];
            remotes?: components["schemas"]["Remote"][];
            /** @description Extension metadata using reverse DNS namespacing */
            _meta?: {
                /**
                 * @description Publisher-specific metadata and build information
                 * @example {
                 *       "tool": "publisher-cli",
                 *       "version": "1.2.3",
                 *       "build_info": {
                 *         "commit": "abc123def456",
                 *         "timestamp": "2023-12-01T10:30:00Z",
                 *         "pipeline_id": "build-789"
                 *       }
                 *     }
                 */
                "io.modelcontextprotocol.registry/publisher-provided"?: {
                    [key: string]: unknown;
                };
                /** @description Registry-specific metadata managed by the MCP registry system */
                "io.modelcontextprotocol.registry/official"?: {
                    /**
                     * Format: uuid
                     * @description Consistent ID across all versions of a server
                     * @example 550e8400-e29b-41d4-a716-446655440000
                     */
                    serverId: string;
                    /**
                     * Format: uuid
                     * @description Unique ID for this specific version
                     * @example 773f9b2e-1a47-4c8d-b5e6-2f8d9c4a7b3e
                     */
                    versionId: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the server was first published to the registry
                     * @example 2023-12-01T10:30:00Z
                     */
                    publishedAt: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the server entry was last updated
                     * @example 2023-12-01T11:00:00Z
                     */
                    updatedAt: string;
                    /**
                     * @description Whether this is the latest version of the server
                     * @example true
                     */
                    isLatest: boolean;
                };
            } & {
                [key: string]: unknown;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
